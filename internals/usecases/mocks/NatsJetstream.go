// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"

	util "github-com/edarha/uploadfile-test/internals/util"
)

// NatsJetstream is an autogenerated mock type for the NatsJetstream type
type NatsJetstream struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *NatsJetstream) Close() {
	_m.Called()
}

// CreateStream provides a mock function with given fields: stream, subject
func (_m *NatsJetstream) CreateStream(stream string, subject string) error {
	ret := _m.Called(stream, subject)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(stream, subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishAsyncContext provides a mock function with given fields: ctx, subject, data, opts
func (_m *NatsJetstream) PublishAsyncContext(ctx context.Context, subject string, data []byte, opts ...nats.PubOpt) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, subject, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, ...nats.PubOpt) string); ok {
		r0 = rf(ctx, subject, data, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, ...nats.PubOpt) error); ok {
		r1 = rf(ctx, subject, data, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueSubscribe provides a mock function with given fields: subject, queue, cb, opts
func (_m *NatsJetstream) QueueSubscribe(subject string, queue string, cb util.MsgHandler, opts ...nats.SubOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subject, queue, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, util.MsgHandler, ...nats.SubOpt) error); ok {
		r0 = rf(subject, queue, cb, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNatsJetstream interface {
	mock.TestingT
	Cleanup(func())
}

// NewNatsJetstream creates a new instance of NatsJetstream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNatsJetstream(t mockConstructorTestingTNewNatsJetstream) *NatsJetstream {
	mock := &NatsJetstream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
